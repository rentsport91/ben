generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String    @id @default(cuid())
  name                       String
  phone                      String
  email                      String    @unique
  isVerified                 Boolean   @default(false)
  password                   String
  verificationToken          String?
  verificationTokenExpiresAt DateTime?

  role      ROLE       @default(USER)
  shipments Shipment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shipment {
  id                String    @id @default(cuid())
  trackingNumber    String    @unique
  estimatedDelivery DateTime
  deliveredAt       DateTime?
  isPaid            Boolean   @default(false) // New field to track payment status

  // Origin information
  originAddress    String
  originCity       String
  originState      String
  originPostalCode String
  originCountry    String

  // Destination information
  destinationAddress    String
  destinationCity       String
  destinationState      String
  destinationPostalCode String
  destinationCountry    String

  serviceType         String
  specialInstructions String?

  packages        Package[]
  TrackingUpdates TrackingUpdate[]
  recipient       Recipient        @relation(fields: [recipientId], references: [id])
  recipientId     String
  Sender          User?            @relation(fields: [userId], references: [id])
  userId          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id            String    @id @default(cuid())
  packageType   String
  weight        Int
  length        Int
  width         Int
  height        Int
  declaredValue Int?
  description   String
  pieces        Int
  dangerous     Boolean
  insurance     Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Shipment      Shipment? @relation(fields: [shipmentId], references: [id])
  shipmentId    String
}

model Recipient {
  id        String     @id @default(cuid())
  name      String
  company   String?
  email     String?
  phone     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  shipments Shipment[]
}

model TrackingUpdate {
  id         String   @id @default(cuid())
  shipmentId String
  timestamp  DateTime @default(now())
  location   String?
  message    String
  status     String? // Can match the shipment status or be more granular
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
}

enum ROLE {
  USER
  ADMIN
  MANAGER
}
